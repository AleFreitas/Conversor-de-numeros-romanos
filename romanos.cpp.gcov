        -:    0:Source:romanos.cpp
        -:    0:Graph:romanos.gcno
        -:    0:Data:romanos.gcda
        -:    0:Runs:1
        -:    1:// "Copyright 2023 <AleFreitas>" [legal/copyright] [5]
        -:    2:#include "./romanos.hpp"
        -:    3:#include <iostream>
        -:    4:#include <string>
        -:    5:
        -:    6:#define numero_romano_I 1
        -:    7:#define numero_romano_V 5
        -:    8:#define numero_romano_X 10
        -:    9:#define numero_romano_L 50
        -:   10:#define numero_romano_C 100
        -:   11:#define numero_romano_D 500
        -:   12:#define numero_romano_M 1000
        -:   13:
       62:   14:int letra_valida(char letra) {
       62:   15:  if (letra == 'I' || letra == 'V' || letra == 'X' ||
       36:   16:    letra == 'L' || letra == 'C' || letra == 'D' ||
       55:   17:    letra == 'M') return 1;
        7:   18:  return 0;
        -:   19:}
        -:   20:
       25:   21:int string_valida(std::string numero) {
       80:   22:  for (int i = 0; i < numero.length(); i++) {
       62:   23:    if (!letra_valida(numero[i])) {
        7:   24:      return 0;
        -:   25:    }
        -:   26:  }
       18:   27:  return 1;
        -:   28:}
        -:   29:
      314:   30:int compara_numero_repeticao(int numero, int comparador_numero,
        -:   31:int reps, int comparador_reps) {
      314:   32:    if (numero == comparador_numero) {
       47:   33:        if (reps >= comparador_reps) return 1;
        -:   34:    }
      308:   35:    return 0;
        -:   36:}
        -:   37:
       47:   38:int verifica_repeticao_indevida(int numero, int reps) {
       47:   39:    int duas_repeticoes = 2;
       47:   40:    int quatro_repeticoes = 4;
       47:   41:    if (compara_numero_repeticao(numero, numero_romano_I,
    #####:   42:    reps, quatro_repeticoes)) return 1;
       47:   43:    if (compara_numero_repeticao(numero, numero_romano_V,
        1:   44:    reps, duas_repeticoes)) return 1;
       46:   45:    if (compara_numero_repeticao(numero, numero_romano_X,
        1:   46:    reps, quatro_repeticoes)) return 1;
       45:   47:    if (compara_numero_repeticao(numero, numero_romano_L,
        1:   48:    reps, duas_repeticoes)) return 1;
       44:   49:    if (compara_numero_repeticao(numero, numero_romano_C,
        1:   50:    reps, quatro_repeticoes)) return 1;
       43:   51:    if (compara_numero_repeticao(numero, numero_romano_D,
        1:   52:    reps, duas_repeticoes)) return 1;
       42:   53:    if (compara_numero_repeticao(numero, numero_romano_M,
        1:   54:    reps, quatro_repeticoes)) return 1;
       41:   55:    return 0;
        -:   56:}
        -:   57:
       18:   58:int encontra_repeticoes(std::string numero) {
       18:   59:    int rep_numero_anterior = 0;
       18:   60:    int numero_anterior = 0;
       59:   61:    for (int i = 0; i < numero.length(); i++) {
       47:   62:        if (numero[i] == 'I') {
        3:   63:            if (numero_anterior != numero_romano_I) {
        3:   64:                numero_anterior = numero_romano_I;
        3:   65:                rep_numero_anterior = 0;
        -:   66:            }
        3:   67:            rep_numero_anterior++;
        -:   68:        }
       47:   69:        if (numero[i] == 'V') {
        4:   70:            if (numero_anterior != numero_romano_V) {
        3:   71:                numero_anterior = numero_romano_V;
        3:   72:                rep_numero_anterior = 0;
        -:   73:            }
        4:   74:            rep_numero_anterior++;
        -:   75:        }
       47:   76:        if (numero[i] == 'X') {
       10:   77:            if (numero_anterior != numero_romano_X) {
        6:   78:                numero_anterior = numero_romano_X;
        6:   79:                rep_numero_anterior = 0;
        -:   80:            }
       10:   81:            rep_numero_anterior++;
        -:   82:        }
       47:   83:        if (numero[i] == 'L') {
        5:   84:            if (numero_anterior != numero_romano_L) {
        4:   85:                numero_anterior = numero_romano_L;
        4:   86:                rep_numero_anterior = 0;
        -:   87:            }
        5:   88:            rep_numero_anterior++;
        -:   89:        }
       47:   90:        if (numero[i] == 'C') {
        9:   91:            if (numero_anterior != numero_romano_C) {
        6:   92:                numero_anterior = numero_romano_C;
        6:   93:                rep_numero_anterior = 0;
        -:   94:            }
        9:   95:            rep_numero_anterior++;
        -:   96:        }
       47:   97:        if (numero[i] == 'D') {
        5:   98:            if (numero_anterior != numero_romano_D) {
        4:   99:                numero_anterior = numero_romano_D;
        4:  100:                rep_numero_anterior = 0;
        -:  101:            }
        5:  102:            rep_numero_anterior++;
        -:  103:        }
       47:  104:        if (numero[i] == 'M') {
       11:  105:            if (numero_anterior != numero_romano_M) {
        6:  106:                numero_anterior = numero_romano_M;
        6:  107:                rep_numero_anterior = 0;
        -:  108:            }
       11:  109:            rep_numero_anterior++;
        -:  110:        }
       47:  111:        if (verifica_repeticao_indevida(numero_anterior,
        6:  112:        rep_numero_anterior)) return 1;
        -:  113:    }
       12:  114:    return 0;
        -:  115:}
        -:  116:
       41:  117:int descobre_unidade_em_romano(char letra) {
       41:  118:    if (letra == 'I') return numero_romano_I;
       36:  119:    if (letra == 'V') return numero_romano_V;
       33:  120:    if (letra == 'X') return numero_romano_X;
       24:  121:    if (letra == 'L') return numero_romano_L;
       20:  122:    if (letra == 'C') return numero_romano_C;
       13:  123:    if (letra == 'D') return numero_romano_D;
        9:  124:    if (letra == 'M') return numero_romano_M;
    #####:  125:    return 0;
        -:  126:}
        -:  127:
       12:  128:int converte_numero(std::string numero) {
       12:  129:    int resultado = 0;
       12:  130:    int numero_anterior = descobre_unidade_em_romano(numero[0]);
       29:  131:    for (int i = 1; i < numero.length(); i++) {
       17:  132:        int numero_atual = descobre_unidade_em_romano(numero[i]);
       17:  133:        if (numero_atual > numero_anterior) {
        -:  134:            // subtrativo
        6:  135:            resultado -= numero_anterior;
        6:  136:            numero_anterior = numero_atual;
       11:  137:        } else if (numero_atual <= numero_anterior) {
        -:  138:            // aditivo
       11:  139:            resultado += numero_anterior;
       11:  140:            numero_anterior = numero_atual;
        -:  141:        }
        -:  142:    }
       12:  143:    int ultimo_numero = descobre_unidade_em_romano(numero[numero.length()-1]);
       12:  144:    resultado+=ultimo_numero;
       12:  145:    return resultado;
        -:  146:}
        -:  147:
       12:  148:int garante_resultado_valido(std::string numero) {
       12:  149:    int resultado = converte_numero(numero);
       17:  150:    if (numero.length() >= 2 &&
        5:  151:    (resultado == numero_romano_I || resultado == numero_romano_V ||
        4:  152:    resultado == numero_romano_X || resultado == numero_romano_L ||
        3:  153:    resultado == numero_romano_C || resultado == numero_romano_D ||
        3:  154:    resultado == numero_romano_M)) return 0;
        9:  155:    return resultado;
        -:  156:}
        -:  157:
       25:  158:int romanos_para_decimal(char const * num_romano) {
       25:  159:  if (!string_valida(num_romano)) return -1;
       18:  160:  if (encontra_repeticoes(num_romano)) return -1;
       12:  161:  int resultado = garante_resultado_valido(num_romano);
       12:  162:  if (!resultado) return -1;
        9:  163:  return resultado;
        -:  164:}
